use std::str::FromStr;
use std::rc::Rc;
use micro_c::{Block, Declaration, Statement, Expression, Type, BinaryOperator, UnaryOperator};

grammar;

pub Program = {
    Block
};

Block: Block<'input> = {
    LBRACE <Declarations> <Statements> RBRACE => Block::new(<>)
};

Declarations: Option<Rc<Declaration<'input>>> = {
    MultipleDeclaration => Some(<>),
    => None
};

MultipleDeclaration: Rc<Declaration<'input>> = {
    SingleDeclaration => <>,
    SingleDeclaration MultipleDeclaration => Rc::new(Declaration::Composite(<>))
};

SingleDeclaration: Rc<Declaration<'input>> = {
    <SimpleDeclaration> SEMI => Rc::new(<>),
};

SimpleDeclaration: Declaration<'input> = {
    <Types> <IDENTIFIER> => Declaration::Variable(<>),
    <Types> <IDENTIFIER> LBRACKET <Constant> RBRACKET => Declaration::Array(<>),
};

Statements: Rc<Statement<'input>> = {
    SingleStatement => Rc::new(<>),
    <s: SingleStatement> <r: Statements> => Rc::new(Statement::Composite(Rc::new(s), r))
};

SingleStatement: Statement<'input> = {
    <SimpleStatements> SEMI => <>,
    IF LPAREN <e: Expression> RPAREN <b: Block> => Statement::IfElse(e,Rc::new(b), None),
    IF LPAREN <e: Expression> RPAREN <b_then: Block> ELSE <b_else: Block>
        => Statement::IfElse(e,Rc::new(b_then),Some(Rc::new(b_else))),
    WHILE LPAREN <e: Expression> RPAREN <b: Block> => Statement::While(e,Rc::new(b)),
    Block => Statement::Scope(Rc::new(<>)),
};

SimpleStatements: Statement<'input> = {
    <IDENTIFIER> ASSIGN <Expression> => Statement::Assign(<>),
    <IDENTIFIER> LBRACKET <Expression> RBRACKET ASSIGN <Expression> => Statement::AssignArray(<>),
    READ <IDENTIFIER> => Statement::Read(<>),
    READ <IDENTIFIER> LBRACKET <Expression> RBRACKET => Statement::ReadArray(<>),
    WRITE <Expression> => Statement::Write(<>),
    BREAK => Statement::Break,
    CONTINUE => Statement::Continue,
};

Expression: Rc<Expression<'input>> = {
    SimpleExpression => Rc::new(<>),
    <e1: SimpleExpression> <o: BinaryOperator> <e2: Expression> =>
        Rc::new(Expression::Binary(Rc::new(e1), o, e2)),
};

SimpleExpression: Expression<'input> ={
    Constant => Expression::Constant(<>),
    <IDENTIFIER> => Expression::Variable(<>),
    <IDENTIFIER> LBRACKET <Expression> RBRACKET => Expression::ArrayAccess(<>),
    <o: UnaryOperator> <e: SimpleExpression> => Expression::Unary(o, Rc::new(e)),
};

Types: Type = {
    INT => Type::Int,
    VOID => Type::Void
};

Constant: i32 = INT_LITERAL => i32::from_str(<>).unwrap();

BinaryOperator: BinaryOperator = {
    PLUS => BinaryOperator::Plus,
    MINUS => BinaryOperator::Minus,
    MUL => BinaryOperator::Multiply,
    DIV => BinaryOperator::Division,
    LT => BinaryOperator::LessThan,
    GT => BinaryOperator::GreaterThan,
    LE => BinaryOperator::LessOrEqual,
    GE => BinaryOperator::GreaterOrEqual,
    EQ => BinaryOperator::Equal,
    NEQ => BinaryOperator::NotEqual,
    AND => BinaryOperator::And,
    OR => BinaryOperator::Or
};

UnaryOperator: UnaryOperator = {
    MINUS => UnaryOperator::Negative,
    NOT => UnaryOperator::Not,
};

// -------------- Lexer Tokens -----------------------
match {
    // Operators
    "&" => AND,
    "|" => OR,
    "=" => ASSIGN,
    ">" => GT,
    ">=" => GE,
    "<" => LT,
    "<=" => LE,
    "==" => EQ,
    "!=" => NEQ,
    "+" => PLUS,
    "-" => MINUS,
    "*" => MUL,
    "/" => DIV,
    "!" => NOT,

    // Punctuation
    "(" => LPAREN,
    ")" => RPAREN,
    "{" => LBRACE,
    "}" => RBRACE,
    "[" => LBRACKET,
    "]" => RBRACKET,
    ":" => COLON,
    ";" => SEMI,

    //Keywords
    "if" => IF,
    "else" => ELSE,
    "while" => WHILE,
    "continue" => CONTINUE,
    "break" => BREAK,
    "write" => WRITE,
    "read" => READ,
    "int" => INT,
    "void" => VOID,
} else {

    // Integer Literal
    r"0|[1-9][0-9]*" => INT_LITERAL,
    r"[a-zA-Z]+" => IDENTIFIER,
    _
}